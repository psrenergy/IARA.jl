name: publish
on:
  workflow_dispatch:
    inputs:
      windows:
        description: 'Build windows'
        required: true
        type: boolean
        default: true
      linux:
        description: 'Build linux'
        required: true
        type: boolean
        default: true
      development_stage:
          type: choice
          description: 'Development stage'
          required: true
          options:
          - Pre alpha
          - Alpha
          - Beta
          - Release candidate
          - Stable release
      version_suffix:
        description: 'Version suffix (ignored if stable release)'
        default: ''
        type: string
        required: false
      overwrite:
        description: 'Overwrite'
        required: true
        type: boolean
        default: false
      docker_only:
        description: 'Skip builds and only publish Docker image'
        required: true
        type: boolean
        default: false

jobs:
  build-publish-windows:
    if: github.event.inputs.windows == 'true' && github.event.inputs.docker_only == 'false'
    name: Build and publish windows
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start AWS ECS instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          SLACK_BOT_USER_OAUTH_ACCESS_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        run: |
          $developmentStage = "${{ github.event.inputs.development_stage }}"
          $versionSuffix = "${{ github.event.inputs.version_suffix }}"
          $overwrite = "${{ github.event.inputs.overwrite }}"
          .\compile\ecs.bat --development_stage "$developmentStage" --version_suffix $versionSuffix --overwrite $overwrite --os windows

  build-publish-linux:
    if: github.event.inputs.linux == 'true' && github.event.inputs.docker_only == 'false'
    name: Build and publish linux
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start AWS ECS instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          SLACK_BOT_USER_OAUTH_ACCESS_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        run: |
          $developmentStage = "${{ github.event.inputs.development_stage }}"
          $versionSuffix = "${{ github.event.inputs.version_suffix }}"
          $overwrite = "${{ github.event.inputs.overwrite }}"
          .\compile\ecs.bat --development_stage "$developmentStage" --version_suffix $versionSuffix --overwrite $overwrite --os linux

  post-publish:
    name: Create release
    runs-on: [self-hosted, linux]
    needs: [build-publish-windows, build-publish-linux]
    if: github.event.inputs.development_stage == 'Stable release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: SebRollen/toml-action@v1.2.0
        id: project_toml
        with:
          file: 'Project.toml'
          field: 'version'

      - uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.project_toml.outputs.value }}
          generateReleaseNotes: true   

  
  retrieve-deployment-data:
    name: Retrieve deployment data
    runs-on: [self-hosted, windows]
    needs: [build-publish-windows, build-publish-linux]
    if: always() && (needs.build-publish-linux.result == 'success' || github.event.inputs.docker_only == 'true')
    outputs:
      version_tag: ${{ steps.deploy_data.outputs.version_tag }}
      aws_url: ${{ steps.deploy_data.outputs.aws_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Retrieve deployment data
        id: deploy_data
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          $developmentStage = "${{ github.event.inputs.development_stage }}"
          $versionSuffix = "${{ github.event.inputs.version_suffix }}"
          $output = .\compile\retrieve_deploy_data.bat --development_stage "$developmentStage" --version_suffix "$versionSuffix" 2>&1
          $lines = ($output -split "`n") | Where-Object { $_.Trim() -ne "" }
          
          # Find version tag (should match semantic version pattern)
          $versionTag = ($lines | Where-Object { $_ -match '^\d+\.\d+\.\d+' } | Select-Object -First 1).Trim()
          
          # Find AWS URL (should contain https://)
          $awsUrl = ($lines | Where-Object { $_ -match 'https://' } | Select-Object -First 1).Trim()
          
          Write-Host "Version Tag: $versionTag"
          Write-Host "AWS URL: $awsUrl"
          
          echo "version_tag=$versionTag" >> $env:GITHUB_OUTPUT
          echo "aws_url=$awsUrl" >> $env:GITHUB_OUTPUT

  docker-publish:
    name: Build and publish container to ghcr.io
    runs-on: [self-hosted, linux]
    needs: [retrieve-deployment-data]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          commitHash=$(git rev-parse --short HEAD)
          docker build -t ghcr.io/psrenergy/iara:latest --build-arg IARA_URL=${{ needs.retrieve-deployment-data.outputs.aws_url }} --build-arg COMMIT_HASH=$commitHash --build-arg VERSION=${{ needs.retrieve-deployment-data.outputs.version_tag }} -f docker/Dockerfile .
          docker push ghcr.io/psrenergy/iara:latest