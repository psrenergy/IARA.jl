name: publish
on:
  workflow_dispatch:
    inputs:
      windows:
        description: 'Build windows'
        required: true
        type: boolean
        default: true
      linux:
        description: 'Build linux'
        required: true
        type: boolean
        default: true
      development_stage:
          type: choice
          description: 'Development stage'
          required: true
          options:
          - Pre alpha
          - Alpha
          - Beta
          - Release candidate
          - Stable release
      version_suffix:
        description: 'Version suffix (ignored if stable release)'
        default: ''
        type: string
        required: false
      overwrite:
        description: 'Overwrite'
        required: true
        type: boolean
        default: false

jobs:
  build-publish-windows:
    if: github.event.inputs.windows == 'true'
    name: Build and publish windows
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start AWS ECS instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          SLACK_BOT_USER_OAUTH_ACCESS_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        run: |
          $developmentStage = "${{ github.event.inputs.development_stage }}"
          $versionSuffix = "${{ github.event.inputs.version_suffix }}"
          $overwrite = "${{ github.event.inputs.overwrite }}"
          .\compile\ecs.bat --development_stage "$developmentStage" --version_suffix $versionSuffix --overwrite $overwrite --os windows

  build-publish-linux:
    if: github.event.inputs.linux == 'true'
    name: Build and publish linux
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start AWS ECS instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          SLACK_BOT_USER_OAUTH_ACCESS_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        run: |
          $developmentStage = "${{ github.event.inputs.development_stage }}"
          $versionSuffix = "${{ github.event.inputs.version_suffix }}"
          $overwrite = "${{ github.event.inputs.overwrite }}"
          .\compile\ecs.bat --development_stage "$developmentStage" --version_suffix $versionSuffix --overwrite $overwrite --os linux

  post-publish:
    name: Create release
    runs-on: [self-hosted, linux]
    needs: [build-publish-windows, build-publish-linux]
    if: github.event.inputs.development_stage == 'Stable release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: SebRollen/toml-action@v1.2.0
        id: project_toml
        with:
          file: 'Project.toml'
          field: 'version'

      - uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.project_toml.outputs.value }}
          generateReleaseNotes: true   

  
  docker-publish:
    name: Build and publish container to ghcr.io
    runs-on: [self-hosted, linux]
    needs: [build-publish-windows, build-publish-linux]
    if: always() && (needs.build-publish-linux.result == 'success')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Retrieve deployment data and build Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          deployData=$(./compile/retrieve_deploy_data.sh --development_stage "${{ github.event.inputs.development_stage }}" --version_suffix "${{ github.event.inputs.version_suffix }}")
          versionTag=$(echo "$deployData" | sed -n '1p')
          awsUrl=$(echo "$deployData" | sed -n '2p')
          commitHash=$(git rev-parse --short HEAD)
          docker build -t ghcr.io/psrenergy/iara:latest --build-arg IARA_URL=$awsUrl --build-arg COMMIT_HASH=$commitHash --build-arg VERSION=$versionTag -f docker/Dockerfile .
          docker push ghcr.io/psrenergy/iara:latest